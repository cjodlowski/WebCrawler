#!/usr/bin/env python3

import argparse
import socket
import ssl
from html.parser import HTMLParser

DEFAULT_SERVER = "project5.3700.network"
DEFAULT_PORT = 443
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print("Encountered a start tag:", tag)

    def handle_endtag(self, tag):
        print("Encountered an end tag :", tag)

    def handle_data(self, data):
        print("Encountered some data  :", data)

class Crawler:
    def __init__(self, args):
        self.server = args.server
        self.port = args.port
        self.username = args.username
        self.password = args.password
        self.htmlparser = MyHTMLParser()
        self.csrftoken = ""
        self.sessionid = ""

    def login(self):
        #get message for login page
        request = ("GET /accounts/login/ HTTP/1.1\n" +
                "Host: " + self.server + ":" + str(self.port) +"\n\n" )
        print("Request to %s:%d" % (self.server, self.port))
        print(request)
        base_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        mysocket = ssl.wrap_socket(base_socket, ssl_version=ssl.PROTOCOL_TLS, ciphers="AES256-SHA256")
        mysocket.connect((self.server, self.port))
        mysocket.send(request.encode('ascii'))
        data = mysocket.recv(1000000).decode('ascii')
        print("Response:\n%s" % data)
        
        csrftoken = data[data.find("csrftoken="):data.find(";",data.find("csrftoken="))]

        middlewaretoken_start = data.find("value=", data.find("csrfmiddlewaretoken")) + len("value=") + 1
        csrfmiddlewaretoken = data[middlewaretoken_start:data.find("\"",middlewaretoken_start)]

        #login information username passwork and csrfmiddlewaretoken
        login_request = ('username=' + self.username + '&password=' + self.password +'&csrfmiddlewaretoken=' + csrfmiddlewaretoken)
        
        #sends login information
        request = ("POST /accounts/login/ HTTP/1.1\nHost: " + self.server + ":" + str(self.port) + "\n" +
                'Content-Type: application/x-www-form-urlencoded\n' +
                'Content-Length: ' + str(len(login_request)) + '\n' +
                'Cookie: ' + csrftoken + '\n\n' +
                login_request + "\n\n")
        print(request)
        mysocket.send(request.encode('ascii'))
        data = mysocket.recv(1000000).decode()
        print("Response:\n%s" % data)

        # get tokens
        csrftoken = data[data.find("csrftoken="):data.find(";",data.find("csrftoken="))]
        #print(csrftoken)
        self.csrftoken = csrftoken
        sessionid = data[data.find('sessionid='):data.find(';', data.find('sessionid='))]
        #print(sessionid)
        self.sessionid = sessionid

        #gets page
        request = ('GET /fakebook/ HTTP/1.1\n' +
           "Host: " + self.server + ":" + str(self.port) +"\n" +
           'Cookie: ' + self.csrftoken + '; ' + self.sessionid + '\n\n')
        mysocket.send(request.encode('ascii'))
        data = mysocket.recv(1000000).decode()
        print("Response:\n%s" % data)

    def run(self):
        self.login()
        
                
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()
