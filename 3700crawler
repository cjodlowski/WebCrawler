#!/usr/bin/env python3

import argparse
import socket
import ssl
from html.parser import HTMLParser

DEFAULT_SERVER = "project5.3700.network"
DEFAULT_PORT = 443
VISITED = []
QUEUE = []
FLAGS = []

class MyHTMLParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.foundFlag = False

    def handle_starttag(self, tag, attrs):
        global VISITED, QUEUE, FLAGS
        atr = dict(attrs)
        if 'href' in atr and "/fakebook/" in atr['href']:
            #print(atr['href'])
            href = atr['href']
            if href not in VISITED:
                QUEUE.append(href)
                #print(QUEUE)
        #elif 'class' in atr and atr['class'] == 'secret_flag':
        #    self.foundFlag = True

    
    def handle_data(self, data):
        #global FLAGS
        #if self.foundFlag and data not in FLAGS:
        if "FLAG" in data and data not in FLAGS:
            FLAGS.append(data)
            print(data)
            f = open("flags.txt", "a")
            f.write(data + "\n")
            f.close()
            self.foundFlag = False
            

class Crawler:
    def __init__(self, args):
        self.server = args.server
        self.port = args.port
        self.username = args.username
        self.password = args.password
        self.socket = {}
        self.csrftoken = ""
        self.sessionid = ""
        self.visited = []
        self.queue = []
        self.parser = MyHTMLParser()

    def login(self):
        #get message for login page
        request = ("GET /accounts/login/ HTTP/1.1\n" +
                "Host: " + self.server + ":" + str(self.port) +"\n\n" )
        print("Request to %s:%d" % (self.server, self.port))
        print(request)
        base_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket = ssl.wrap_socket(base_socket, ssl_version=ssl.PROTOCOL_TLS, ciphers="AES256-SHA256")
        self.socket.connect((self.server, self.port))
        self.socket.send(request.encode('ascii'))
        data = self.socket.recv(8192).decode('ascii')
        print("Response:\n%s" % data)
        
        
        csrftoken = data[data.find("csrftoken="):data.find(";",data.find("csrftoken="))]

        middlewaretoken_start = data.find("value=", data.find("csrfmiddlewaretoken")) + len("value=") + 1
        csrfmiddlewaretoken = data[middlewaretoken_start:data.find("\"",middlewaretoken_start)]

        #login information username passwork and csrfmiddlewaretoken
        login_request = ('username=' + self.username + '&password=' + self.password +'&csrfmiddlewaretoken=' + csrfmiddlewaretoken)
        
        #sends login information
        request = ("POST /accounts/login/ HTTP/1.1\nHost: " + self.server + ":" + str(self.port) + "\n" +
                'Content-Type: application/x-www-form-urlencoded\n' +
                'Content-Length: ' + str(len(login_request)) + '\n' +
                'Cookie: ' + csrftoken + '\n\n' +
                login_request + "\n\n")
        print(request)
        self.socket.send(request.encode('ascii'))
        data = self.socket.recv(8192).decode()
        #print("Response:\n%s" % data)

        # get tokens
        csrftoken = data[data.find("csrftoken="):data.find(";",data.find("csrftoken="))]
        #print(csrftoken)
        self.csrftoken = csrftoken
        sessionid = data[data.find('sessionid='):data.find(';', data.find('sessionid='))]
        #print(sessionid)
        self.sessionid = sessionid

    def parse_response_code(self, data):
        http_header = data[data.find('HTTP/1.1') + 9 :data.find('HTTP/1.1') + 13]
        #print(data)
        return http_header

    def connection_status(self, data) : 
        status = data[data.find('Connection: ') + len("Connection: ") : data.find("\n", data.find('Connection: '))]
        #print("Status " + status)
        return status

    def get_page(self, href): 
        #gets page
        request = ('GET ' + href + ' HTTP/1.1\n' +
           "Host: " + self.server + ":" + str(self.port) +"\n" +
           'Cookie: ' + self.csrftoken + '; ' + self.sessionid + '\n\n')
        self.socket.send(request.encode('ascii'))
        data = self.socket.recv(8192).decode()
        if "close" in self.connection_status(data):
            self.socket.close()
            base_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket = ssl.wrap_socket(base_socket, ssl_version=ssl.PROTOCOL_TLS, ciphers="AES256-SHA256")
            self.socket.connect((self.server, self.port))
            self.socket.send(request.encode('ascii'))
            data = self.socket.recv(8192).decode()
            print("reconnected")
            print(data)
        code = int(self.parse_response_code(data))
        if code == 200:
            #everything is good, proceed normally
            #print("Response:\n%s" % data)
            self.parser.feed(data)
            VISITED.append(href)
        elif code == 302:
            #insert the redirect header to the front of the queue
            redirect = data[data.find('Location'):data.find(';', data.find('Location'))]
            QUEUE.insert(0, redirect)
            VISITED.append(href)
        elif code == 403 or code == 404:
            #do not try this URL again and do not parse
            VISITED.append(href)
        elif code == 500:
            #server error, just append the current href to the front of the queue to try again
            QUEUE.insert(0, href)
        else:
            print("Unknown code")

        

    def run(self):
        global VISITED, QUEUE
        self.login()
        self.get_page('/fakebook/')
        #count = 0
        while len(QUEUE) != 0 and len(FLAGS) < 5:
            next_href = QUEUE.pop(0)
            self.get_page(next_href)
            #print(count)
            #count += 1
        print(FLAGS)

        
                
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()